<?xml version="1.0" encoding="UTF-8"?>
<pmd-cpd>
   <duplication lines="37" tokens="210">
      <file line="156"
            path="C:\Users\xujun\Desktop\arphandler\arphandler\src\main\java\org\opendaylight\l2switch\arphandler\inventory\InventoryReader.java"/>
      <file line="236"
            path="C:\Users\xujun\Desktop\arphandler\arphandler\src\main\java\org\opendaylight\l2switch\arphandler\inventory\InventoryReader.java"/>
      <codefragment><![CDATA[    public void readInventory() {
        // Only run once for now
        if (!refreshData) {
            return;
        }
        synchronized (this) {
            if (!refreshData)
                return;
            // Read Inventory
            InstanceIdentifier.InstanceIdentifierBuilder<Nodes> nodesInsIdBuilder = InstanceIdentifier
                    .<Nodes>builder(Nodes.class);
            Nodes nodes = null;
            ReadOnlyTransaction readOnlyTransaction = dataService.newReadOnlyTransaction();

            try {
                Optional<Nodes> dataObjectOptional = null;
                dataObjectOptional = readOnlyTransaction
                        .read(LogicalDatastoreType.OPERATIONAL, nodesInsIdBuilder.build()).get();
                if (dataObjectOptional.isPresent())
                    nodes = (Nodes) dataObjectOptional.get();
            } catch (InterruptedException e) {
                LOG.error("Failed to read nodes from Operation data store.");
                readOnlyTransaction.close();
                throw new RuntimeException("Failed to read nodes from Operation data store.", e);
            } catch (ExecutionException e) {
                LOG.error("Failed to read nodes from Operation data store.");
                readOnlyTransaction.close();
                throw new RuntimeException("Failed to read nodes from Operation data store.", e);
            }

            if (nodes != null) {
                // Get NodeConnectors for each node
                for (Node node : nodes.getNode()) {
                    ArrayList<NodeConnectorRef> nodeConnectorRefs = new ArrayList<NodeConnectorRef>();
                    List<NodeConnector> nodeConnectors = node.getNodeConnector();
                    if (nodeConnectors != null) {
                        for (NodeConnector nodeConnector : nodeConnectors) {]]></codefragment>
   </duplication>
   <duplication lines="27" tokens="145">
      <file line="210"
            path="C:\Users\xujun\Desktop\arphandler\arphandler\src\main\java\org\opendaylight\l2switch\arphandler\inventory\InventoryReader.java"/>
      <file line="285"
            path="C:\Users\xujun\Desktop\arphandler\arphandler\src\main\java\org\opendaylight\l2switch\arphandler\inventory\InventoryReader.java"/>
      <codefragment><![CDATA[                    switchNodeConnectors.put(node.getId().getValue(), nodeConnectorRefs);
                    NodeConnectorRef ncRef = new NodeConnectorRef(InstanceIdentifier.<Nodes>builder(Nodes.class)
                            .<Node, NodeKey>child(Node.class, node.getKey())
                            .<NodeConnector, NodeConnectorKey>child(NodeConnector.class,
                                    new NodeConnectorKey(new NodeConnectorId(node.getId().getValue() + ":LOCAL")))
                            .build());
                    LOG.debug("Local port for node {} is {}", node.getKey(), ncRef);
                    controllerSwitchConnectors.put(node.getId().getValue(), ncRef);
                }
            }
            readOnlyTransaction.close();
            refreshData = false;

            if(0 == listenerRegistrationList.size()){
              registerAsDataChangeListener();
            }
        }
    }








   public void readInventory(boolean nostp) {]]></codefragment>
   </duplication>
   <duplication lines="33" tokens="143">
      <file line="92"
            path="C:\Users\xujun\Desktop\arphandler\arphandler\src\main\java\org\opendaylight\l2switch\arphandler\core\PacketDispatcher.java"/>
      <file line="127"
            path="C:\Users\xujun\Desktop\arphandler\arphandler\src\main\java\org\opendaylight\l2switch\arphandler\core\PacketDispatcher.java"/>
      <codefragment><![CDATA[        List<NodeConnectorRef> nodeConnectors = inventoryReader.getSwitchNodeConnectors().get(nodeId);

        if (nodeConnectors == null) {
            refreshInventoryReader();
            nodeConnectors = inventoryReader.getSwitchNodeConnectors().get(nodeId);
            if (nodeConnectors == null) {
                LOG.info("Cannot flood packets, as inventory doesn't have any node connectors for node {}", nodeId);
                return;
            }
        }
        for (NodeConnectorRef ncRef : nodeConnectors) {
            String ncId = ncRef.getValue().firstIdentifierOf(NodeConnector.class)
                    .firstKeyOf(NodeConnector.class, NodeConnectorKey.class).getId().getValue();
            // Don't flood on discarding node connectors & origIngress
            if (!ncId.equals(origIngress.getValue().firstIdentifierOf(NodeConnector.class)
                    .firstKeyOf(NodeConnector.class, NodeConnectorKey.class).getId().getValue())) {
                sendPacketOut(payload, origIngress, ncRef);
            }
        }
    }

    
    
    
    /**
     * Floods the packet.
     *
     * @param payload
     *            The payload to be sent.
     * @param origIngress
     *            The NodeConnector where the payload came from.
     */
    public void floodPacket(String nodeId, byte[] payload, NodeConnectorRef origIngress,]]></codefragment>
   </duplication>
   <duplication lines="12" tokens="102">
      <file line="37"
            path="C:\Users\xujun\Desktop\arphandler\arphandler\src\main\yang-gen-code\org\opendaylight\yang\gen\v1\urn\opendaylight\packet\arp\handler\config\rev140528\ArpHandlerConfigBuilder.java"/>
      <file line="318"
            path="C:\Users\xujun\Desktop\arphandler\arphandler\src\main\yang-gen-code\org\opendaylight\yang\gen\v1\urn\opendaylight\packet\arp\handler\config\rev140528\ArpHandlerConfigBuilder.java"/>
      <codefragment><![CDATA[    public ArpHandlerConfigBuilder(ArpHandlerConfig base) {
        this._arpFlowHardTimeout = base.getArpFlowHardTimeout();
        this._arpFlowIdleTimeout = base.getArpFlowIdleTimeout();
        this._arpFlowPriority = base.getArpFlowPriority();
        this._arpFlowTableId = base.getArpFlowTableId();
        this._floodFlowHardTimeout = base.getFloodFlowHardTimeout();
        this._floodFlowIdleTimeout = base.getFloodFlowIdleTimeout();
        this._floodFlowInstallationDelay = base.getFloodFlowInstallationDelay();
        this._floodFlowPriority = base.getFloodFlowPriority();
        this._floodFlowTableId = base.getFloodFlowTableId();
        this._isHybridMode = base.isIsHybridMode();
        this._isProactiveFloodMode = base.isIsProactiveFloodMode();]]></codefragment>
   </duplication>
</pmd-cpd>